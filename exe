from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.backends import default_backend

def generate_rsa_keys(key_size=2048):
    """Generate RSA private and public key pair with specified key size."""
    try:
        private_key = rsa.generate_private_key(
            public_exponent=65537,
            key_size=key_size,
            backend=default_backend()
        )
        
        private_pem = private_key.private_bytes(
            encoding=serialization.Encoding.PEM,
            format=serialization.PrivateFormat.TraditionalOpenSSL,
            encryption_algorithm=serialization.NoEncryption()  # Could add password option
        )
        
        public_key = private_key.public_key()
        public_pem = public_key.public_bytes(
            encoding=serialization.Encoding.PEM,
            format=serialization.PublicFormat.SubjectPublicKeyInfo
        )
        
        return private_pem, public_pem
    except Exception as e:
        raise RuntimeError(f"Key generation failed: {e}")

def save_keys_to_files(private_pem, public_pem, private_key_filename='private_key.pem', public_key_filename='public_key.pem'):
    """Save RSA keys to specified files."""
    try:
        with open(private_key_filename, 'wb') as private_file:
            private_file.write(private_pem)
        with open(public_key_filename, 'wb') as public_file:
            public_file.write(public_pem)
        return True
    except IOError as e:
        raise RuntimeError(f"Failed to save keys: {e}")

def main():
    """Generate and save RSA key pair."""
    try:
        private_pem, public_pem = generate_rsa_keys()
        save_keys_to_files(private_pem, public_pem)
        print(f"RSA keys (2048-bit) generated and saved to 'private_key.pem' and 'public_key.pem'.")
    except RuntimeError as e:
        print(f"Error: {e}")

if __name__ == "__main__":
    main()
