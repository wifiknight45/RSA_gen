from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.backends import default_backend

def generate_rsa_keys():
    # Generate private key
    private_key = rsa.generate_private_key(
        public_exponent=65537,
        key_size=2048,
        backend=default_backend()
    )
    
    # Serialize private key
    private_pem = private_key.private_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PrivateFormat.TraditionalOpenSSL,
        encryption_algorithm=serialization.NoEncryption()
    )
    
    # Generate public key
    public_key = private_key.public_key()
    
    # Serialize public key
    public_pem = public_key.public_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PublicFormat.SubjectPublicKeyInfo
    )
    
    return private_pem, public_pem

def save_keys_to_files(private_pem, public_pem, private_key_filename='private_key.pem', public_key_filename='public_key.pem'):
    with open(private_key_filename, 'wb') as private_file:
        private_file.write(private_pem)
        
    with open(public_key_filename, 'wb') as public_file:
        public_file.write(public_pem)

def main():
    private_pem, public_pem = generate_rsa_keys()
    save_keys_to_files(private_pem, public_pem)
    print("RSA keys have been generated and saved to files.")

if __name__ == "__main__":
    main()
